20.03.2023
------------------
Projects (contain apps).
Apps - any app can be within multiple projects.
Models - DB entities (Django manages adding new fields, etc.)
Views - "web pages" for an App. View design can be separated from Python code via Templates.
С 7:40 до 8:40 утром
С 7:20 вечером...
Есть возможность быстро добавлять тесты.
Работа со статичными файлами, типа style.css, background.png...

Будет примерно так. Проект constructivechoice_dev -- его, говорят, можно поменять в смысле названия. Поведём аналогию с игрушечным приложением polls из обучалки.
Там можно было добавлять вопрос и варианты ответа.
Мы же будем добавлять строительные проекты. А в них --- задачи, которые будем решать.
Чтобы это всё не было скучным, подрулим сразу с философией.
Объект (программный) будем называть не скучным и похожим на всё на свете словом project, а прикольным словечком construct. Опции проекта (задачи) будут не тасками, а выборами: choice. Оно ведь так и называется constructive choice.
Создал аппликацию list, в которой уже будут конструкты. А в них уже --- чойсы.
Время: 21:20. Пора спать.

21.03.2023
-----------------
утро, 7:45-9:17
Соорудил классы для Конструкта и Чойса.
Добавил в базу.
Добавил админа: yury, пароль - физика обычная.
Зарегал класс Конструкта. Теперь их можно добавлять в базу из админской панели.
Вопрос: как в тот конструкт добавлять чойсы?
вечер, 20:00-22:55
Todo: Тест: чтобы прогресс проекта совпадал со средним от прогрессов задач.
У нас механика такая:
- список проектов. Название - это ссылка на детали. Рядом кнопка "править", чтобы править эти детали.
- заходим в проект
- можем поменять прогресс у каждой задачи

22.03.2023
------------------
утро, 6:45-9:10
Todo: Фича: Чойс "разное" для денежных потоков, которые не ложатся на конретные работы.
Прогресс и Инвойсы - вот что важно.
Список проектов в виде таблицы.
Todo: Прокрутка вправо не смещает первый столбец - название проекта. Аналогично для таблицы работ.
Нацелим это дело изначально на главного админа. Потом, думаю, не будет проблем скрывать те или иные столбцы, если у пользователя нет на них прав.
Каждая задача может быть адресована либо человеку, либо команде. Но в команде тоже конкретные люди. Также, несколько человек могут быть прикреплены к задаче. Значит, нужны такие рабочие (Workers), как: Команда-такая-то и Somebody (которого можно прикреплять при создании работы, когда ещё непонятно, кто там будет).
Кроме того, есть ещё профессии, не привязанные к людям. Их тоже можно завести в качестве рабочих. Что-то вроде Somebody.
- Добавил разделитель тысяч; класс Рабочих (рабочий класс)); валидаторы телефона и имейла; ManyToMany() отношение между Рабочими и Чойсами; стилевой файл style.css; аккуратные таблички вместо списков.
вечер 20:35-21:55
Todo: Работы упорядочиваются в списке по дате начала.
Todo: в админке рабочий отображается с задачами, на которых он отмечен (сверху - незаконченные задачи, ниже - законченные, которые можно даже скрыть под кат). Задачи отображаются с рабочими... хм... это и так реализовано, по умолчанию.
pip3 install django-template-maths (оказалось, простое действие не так-то просто сделать)

23.03.2023
-----------------
утро 7:18-9:25
Посчитал проценты и прочие вычисления внутри view.py.
Добавил таблички с адресами-ценами на страницу проекта.
Связал проценты проекта с процентами задач.
вечер 7:40 - 22:20
Сделал добавочные строчки работ.
Todo: чтобы были подразделы работ.
Todo: чтобы сортировка в подразделе шла по дате начала - тогда подходящий порядок должен получиться. (Обсудить с Серёгой: добавляем только снизу, но по дате оно потом встаёт в нужное место.)
А что если произвольную вложенность сделать? Любая задача может содержать любое количество других задач. Так ведь оно и есть по факту.

24.03.2023
-----------------
утро 7:17-9:00
Подумал, что не стоит городить сложную вложенность. Сложность - враг надёжности.
Те же подразделы можно организовать только для отображения. Типа, у такого-то проекта есть такое-то дерево подразделов. Вот это дерево и будет хранить информацию о том, какие в нём проживают задачи.
Сейчас: реализовать сохранение новых задач со странички проекта. Через формы Джанго.
Только начал что-то иное делать. Важно, чтобы все финансы были подбиты по проектам.
Сразу стало понятно, что надо вводить класс инвойсов, через которые все деньги будут
учитываться.
Инвойс - это всегда конкретная бумажка, конкретная транзакция, которая идёт в плюс или в минус компании. В большинстве случаев - по конкретной работе. Если не понятно, по какой, то идёт куда-то в работу под названием miscelaneous.

25.03.2023
------------------
Сделал html+js динамическую табличку для быстрого добавления задач в проект.
Заголовки тоже можно добавлять.

27.03.2023
------------------
утро, 7:35-9:00
Что же, надо повторить всю эту динамику в джанго-проекте.
Добавил только проверку ошибки.
вечер, 19:08-22:49
Добавил кучу всего в механику основной страницы с задачами. Проверки ошибок.
Возможность удалять и восстанавливать. 
Заморозку страницы, чтобы никаких инпутов не висело.
Тест добавил, чтобы автоматом куча действий вызывалась и проверялась тем самым.

28.03.2023
------------------
утро, 7:15-9:00
вечер, 7:18-22:28
Todo: Не забыть про необходимость комментариев.
Todo: вначале берётся задаток, типа, 25%. Ну а мы будем вести три поля: Заплачено денег, Прогресс (на такую-то сумму), Заплачено минус Прогресс. И ещё надо бы: Потрачено по факту.
