20.03.2023
------------------
Projects (contain apps).
Apps - any app can be within multiple projects.
Models - DB entities (Django manages adding new fields, etc.)
Views - "web pages" for an App. View design can be separated from Python code via Templates.
С 7:40 до 8:40 утром
С 7:20 вечером...
Есть возможность быстро добавлять тесты.
Работа со статичными файлами, типа style.css, background.png...

Будет примерно так. Проект constructivechoice_dev -- его, говорят, можно поменять в смысле названия. Поведём аналогию с игрушечным приложением polls из обучалки.
Там можно было добавлять вопрос и варианты ответа.
Мы же будем добавлять строительные проекты. А в них --- задачи, которые будем решать.
Чтобы это всё не было скучным, подрулим сразу с философией.
Объект (программный) будем называть не скучным и похожим на всё на свете словом project, а прикольным словечком construct. Опции проекта (задачи) будут не тасками, а выборами: choice. Оно ведь так и называется constructive choice.
Создал аппликацию list, в которой уже будут конструкты. А в них уже --- чойсы.
Время: 21:20. Пора спать.

21.03.2023
-----------------
утро, 7:45-9:17
Соорудил классы для Конструкта и Чойса.
Добавил в базу.
Добавил админа: yury, пароль - физика обычная.
Зарегал класс Конструкта. Теперь их можно добавлять в базу из админской панели.
Вопрос: как в тот конструкт добавлять чойсы?
вечер, 20:00-22:55
Todo: Тест: чтобы прогресс проекта совпадал со средним от прогрессов задач.
У нас механика такая:
- список проектов. Название - это ссылка на детали. Рядом кнопка "править", чтобы править эти детали.
- заходим в проект
- можем поменять прогресс у каждой задачи

22.03.2023
------------------
утро, 6:45-9:10
Todo: Фича: Чойс "разное" для денежных потоков, которые не ложатся на конретные работы.
Прогресс и Инвойсы - вот что важно.
Список проектов в виде таблицы.
Todo: Прокрутка вправо не смещает первый столбец - название проекта. Аналогично для таблицы работ.
Нацелим это дело изначально на главного админа. Потом, думаю, не будет проблем скрывать те или иные столбцы, если у пользователя нет на них прав.
Каждая задача может быть адресована либо человеку, либо команде. Но в команде тоже конкретные люди. Также, несколько человек могут быть прикреплены к задаче. Значит, нужны такие рабочие (Workers), как: Команда-такая-то и Somebody (которого можно прикреплять при создании работы, когда ещё непонятно, кто там будет).
Кроме того, есть ещё профессии, не привязанные к людям. Их тоже можно завести в качестве рабочих. Что-то вроде Somebody.
- Добавил разделитель тысяч; класс Рабочих (рабочий класс)); валидаторы телефона и имейла; ManyToMany() отношение между Рабочими и Чойсами; стилевой файл style.css; аккуратные таблички вместо списков.
вечер 20:35-21:55
Todo: Работы упорядочиваются в списке по дате начала.
Todo: в админке рабочий отображается с задачами, на которых он отмечен (сверху - незаконченные задачи, ниже - законченные, которые можно даже скрыть под кат). Задачи отображаются с рабочими... хм... это и так реализовано, по умолчанию.
pip3 install django-template-maths (оказалось, простое действие не так-то просто сделать)

23.03.2023
-----------------
утро 7:18-9:25
Посчитал проценты и прочие вычисления внутри view.py.
Добавил таблички с адресами-ценами на страницу проекта.
Связал проценты проекта с процентами задач.
вечер 19:40 - 22:20
Сделал добавочные строчки работ.
Todo: чтобы были подразделы работ.
Todo: чтобы сортировка в подразделе шла по дате начала - тогда подходящий порядок должен получиться. (Обсудить с Серёгой: добавляем только снизу, но по дате оно потом встаёт в нужное место.)
А что если произвольную вложенность сделать? Любая задача может содержать любое количество других задач. Так ведь оно и есть по факту.

24.03.2023
-----------------
утро 7:17-9:00
Подумал, что не стоит городить сложную вложенность. Сложность - враг надёжности.
Те же подразделы можно организовать только для отображения. Типа, у такого-то проекта есть такое-то дерево подразделов. Вот это дерево и будет хранить информацию о том, какие в нём проживают задачи.
Сейчас: реализовать сохранение новых задач со странички проекта. Через формы Джанго.
Только начал что-то иное делать. Важно, чтобы все финансы были подбиты по проектам.
Сразу стало понятно, что надо вводить класс инвойсов, через которые все деньги будут
учитываться.
Инвойс - это всегда конкретная бумажка, конкретная транзакция, которая идёт в плюс или в минус компании. В большинстве случаев - по конкретной работе. Если не понятно, по какой, то идёт куда-то в работу под названием miscelaneous.

25.03.2023
------------------
22:00-02:00
Сделал html+js динамическую табличку для быстрого добавления задач в проект.
Заголовки тоже можно добавлять.

27.03.2023
------------------
утро, 7:35-9:00
Что же, надо повторить всю эту динамику в джанго-проекте.
Добавил только проверку ошибки.
вечер, 19:08-22:49
Добавил кучу всего в механику основной страницы с задачами. Проверки ошибок.
Возможность удалять и восстанавливать. 
Заморозку страницы, чтобы никаких инпутов не висело.
Тест добавил, чтобы автоматом куча действий вызывалась и проверялась тем самым.

28.03.2023
------------------
утро, 7:15-9:00
вечер, 19:18-22:28
Todo: Не забыть про необходимость комментариев.
Todo: вначале берётся задаток, типа, 25%. Ну а мы будем вести три поля: Заплачено денег, Прогресс (на такую-то сумму), Заплачено минус Прогресс. И ещё надо бы: Потрачено по факту.

29.03.2023
------------------
утро, 6:40-9:00
А неплохо бы, наверное, всю нужную информацию подкидывать через view, неправда ли? Вот эти все индексы полей и т.п. Закидываешь на страничку через Джанго, берёшь со странички через JS.
Так, усложним первый тест, чтобы побольше полей обрабатывал.
Он потянет за собой необходимость валидации новых полей.
вечер, 19:12-21:30
Поставить delete в один столбец. Для этого искать его не по ячейке, а по id.
Затрахался, но сделал... Время уже 21:50.
Фух... уже 23:31... Баиньки пора... Сделал PrettyRawBtn() функцию, шобы делать красиво :)

30.03.2023
-----------------
утро, 7:15-11:50
Упростил обработку delete, чтобы потом проще было туда же modify припаять.
Сейчас думаю соорудить подсчёт суммы подпроекта (под заголовком).
To Fix: меняется цена всего проекта, если зачёркивается первый заголовок. (Fixed)
вечер, 19:15-22:03
Прогресс ещё надо оформить, а то как-то куце без него.
Запилим-ка модификацию поля. Ссылочка будет пропадать, если поле зачёркнуто.

31.03.2023
-----------------
утро, 7:15 - 9:00
Поле Assigned To будем пока игнорировать при сохранении новых задач.
Todo: двойной клик на текстовом поле в таблице должен вызывать модификацию этого поля. Enter - для заморозки.
Todo: wow-фича - добавить кнопочки типа "тестовый дом", "тестовый гараж", "тестовый сарай", что сразу пачки работ добавлять.

07.04.2023
------------------
утро, 7:30-10:10
Добавил предупреждение, чтобы страничка с задачами не перезагружалась "вдруг".
Подкорректировал вид списка проектов в админской панели, чтобы можно было переходить на страничку проекта оттуда. Смысл такой: добавляем проект в админке, переходим на его страничку для правки.
-14:05
Запилил JSON форматирование для отправки таблички на сохранение.
19:00-23:42
Сделал приём JSON-данных.
Теперь вопрос: нужно положить новые задачи в базу вместе с заголовками, а затем тут же вынуть, вынуть заголовки и правильным образом обратно разместить. Можно ли, сохраняя задачу в базу тут же получать её идентификатор из базы? Чтобы вот для данного Конструкта на ходу формировать структуру его внутренностей.
Header1
- Header2
--- task
--- task
- Header2
-- Header3
--- task
--- task
--- task

08.04.2023
-----------------
утро, 8:35-13:30
Придумал хранить структуру проекта в виде поля в модели проекта. То ли текстовое поле, то ли прямо JsonField, если такое имеется.
{ "Header1": "root", "Lines": {
     "line1": { "type": ("Choice" | "Header2" | "Header3"), "id": ("name" | "number")},
     "line2": { "type": ("Choice" | "Header2" | "Header3"), "id": ("name" | "number")},
     ...
     "lineN": { "type": ("Choice" | "Header2" | "Header3"), "id": ("name" | "number")}
     }
}
В качестве теста: проверять, что набор id линий, которые Choice, в точности соответствует набору Чойсов данного Конструкта (проекта).
При выгрузке на страницу вынимаем набор Чойсов и делаем из него словарь: "id": choice. Берём также словарь линий. Отправляем всё через view в шаблон. В шаблоне перебираем линии и создаём соответствующие <tr> для заголовков и задач.
Сначала сделаю-ка я JSON словарь на отправке данных. Не строчку буду собирать, а именно словарь, который потом сконвертируется.
При создании проекта (пустого или с малым набором задач) никакой структуры у него не будет. Она пустая. Структура создаётся и заполняется в первый раз когда производится сохранение задач со странички с их списком.
19:00 - 23:42
Соорудил разные добавления-сохранения-обновления в базу.
Заделал JSON-структуру проекта, которая в виде текста сохраняется в Конструкт.
Теперь надо организовать распаковку этой структуры обратно на страничку. Перед распаковкой будет checkIntegrity(), чтобы все Чойсы структуры наличествовали в базе под тем же Конструктом.

09.04.2023
------------------
9:00 - 12:00
Извлекаем Чойсы. Извлекаем структуру.
Если структура пустая, то воссоздаём её по чойсам. Просто: "lineK": {"type":"Choice", "id":"N"}
По строчкам структуры создаём строчки для выгрузки на страничку.
18:20-20:30

10.04.2023
------------------
8:00-9:20

11.04.2023
------------------
7:50-9:46
Если нужно обнулить структуру проекта, вписываем туда {} через панель администратора.
Добавил добавление шаблонов Дома и Гаража по ссылкам.

13.04.2023
------------------
7:10 - 9:00
811b3dc (HEAD -> master) Reducing updates of DB by comparing 'new' and old instances.
aa4cb36 Choice notes to be a TextField (not the Char one).
a4c6475 Revised some log printouts
6aef951 Changing 'name' input to <textarea>

14.04.2023
------------------
7:20-9:00

Идея в целом такая: здесь, в этой же системе создать список работ по доработке системы.
Послать Серёге - пусть радуется. Чтобы видно было, что эта штука работает уже сейчас.
Собственно, набросок этого списка будет следующим.
- Приделать номера строчек, чтобы было на что ссылаться в разговорах-обсуждениях.
- Приделать дату и время последнего сохранения, чтобы это было версией проекта.
- Приделать заметки к задаче. Заметок может быть много, но не хочется растягивать строку по высоте. Поэтому для режима просмотра заметки попробуем сделать выпадающим текстом. Для режима правки можно и строку растянуть - не проблема.
- Отладить добавку ответственного за работу. Я так и не понял: Серёга жаловался, что крайне непросто двигать людей и работы в графике, но в то же время говорит, что проект просто отдаётся какой-то команде, и он сам толком не знает, кто там какие работы делает. Кто же тогда людей и работы двигает в графике?
- Сделать диаграммы Ганта для проектов. Просмотр внутри одного проекта. Просмотр между всеми активными проектами. Строчка задачи должна быть невысокая (одна строка текста в названии), в ней находится дата начала, срок исполнения в днях, исполнитель работы, прогресс. Справа - календарь и цветные полоски диаграммы.
- Добавить класс инвойса. Отладить движение денег по проектам со входом и выходом через инвойсы. Написать много тестов для этого.
- Добавить возможность регистрировать входные и выходные инвойсы через форму на странице. 
- Добавить возможность регистрировать входные и выходные инвойсы через отправку их на специальный email.
>>> Жук: добавлял задачи, сумел как-то повесить уже добавленную задачу в состоянии modify (кажется, случайно кликнул туда, когда добавлял задачу ниже). А при повторном нажатии modify вся информация из ячеек очистилась. Было печально :(

18.04.2023
-----------------
Жука исправил. Модифицировал модификацию. Сделал безопаснее.
