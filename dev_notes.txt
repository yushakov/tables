20.03.2023
------------------
Projects (contain apps).
Apps - any app can be within multiple projects.
Models - DB entities (Django manages adding new fields, etc.)
Views - "web pages" for an App. View design can be separated from Python code via Templates.
С 7:40 до 8:40 утром
С 7:20 вечером...
Есть возможность быстро добавлять тесты.
Работа со статичными файлами, типа style.css, background.png...

Будет примерно так. Проект constructivechoice_dev -- его, говорят, можно поменять в смысле названия. Поведём аналогию с игрушечным приложением polls из обучалки.
Там можно было добавлять вопрос и варианты ответа.
Мы же будем добавлять строительные проекты. А в них --- задачи, которые будем решать.
Чтобы это всё не было скучным, подрулим сразу с философией.
Объект (программный) будем называть не скучным и похожим на всё на свете словом project, а прикольным словечком construct. Опции проекта (задачи) будут не тасками, а выборами: choice. Оно ведь так и называется constructive choice.
Создал аппликацию list, в которой уже будут конструкты. А в них уже --- чойсы.
Время: 21:20. Пора спать.

21.03.2023
-----------------
утро, 7:45-9:17
Соорудил классы для Конструкта и Чойса.
Добавил в базу.
Добавил админа: yury, пароль - физика обычная.
Зарегал класс Конструкта. Теперь их можно добавлять в базу из админской панели.
Вопрос: как в тот конструкт добавлять чойсы?
вечер, 20:00-22:55
Todo: Тест: чтобы прогресс проекта совпадал со средним от прогрессов задач.
У нас механика такая:
- список проектов. Название - это ссылка на детали. Рядом кнопка "править", чтобы править эти детали.
- заходим в проект
- можем поменять прогресс у каждой задачи

22.03.2023
------------------
утро, 6:45-9:10
Todo: Фича: Чойс "разное" для денежных потоков, которые не ложатся на конретные работы.
Прогресс и Инвойсы - вот что важно.
Список проектов в виде таблицы.
Todo: Прокрутка вправо не смещает первый столбец - название проекта. Аналогично для таблицы работ.
Нацелим это дело изначально на главного админа. Потом, думаю, не будет проблем скрывать те или иные столбцы, если у пользователя нет на них прав.
Каждая задача может быть адресована либо человеку, либо команде. Но в команде тоже конкретные люди. Также, несколько человек могут быть прикреплены к задаче. Значит, нужны такие рабочие (Workers), как: Команда-такая-то и Somebody (которого можно прикреплять при создании работы, когда ещё непонятно, кто там будет).
Кроме того, есть ещё профессии, не привязанные к людям. Их тоже можно завести в качестве рабочих. Что-то вроде Somebody.
- Добавил разделитель тысяч; класс Рабочих (рабочий класс)); валидаторы телефона и имейла; ManyToMany() отношение между Рабочими и Чойсами; стилевой файл style.css; аккуратные таблички вместо списков.
вечер 20:35-21:55
Todo: Работы упорядочиваются в списке по дате начала.
Todo: в админке рабочий отображается с задачами, на которых он отмечен (сверху - незаконченные задачи, ниже - законченные, которые можно даже скрыть под кат). Задачи отображаются с рабочими... хм... это и так реализовано, по умолчанию.
pip3 install django-template-maths (оказалось, простое действие не так-то просто сделать)

23.03.2023
-----------------
утро 7:18-9:25
Посчитал проценты и прочие вычисления внутри view.py.
Добавил таблички с адресами-ценами на страницу проекта.
Связал проценты проекта с процентами задач.
вечер 19:40 - 22:20
Сделал добавочные строчки работ.
Todo: чтобы были подразделы работ.
Todo: чтобы сортировка в подразделе шла по дате начала - тогда подходящий порядок должен получиться. (Обсудить с Серёгой: добавляем только снизу, но по дате оно потом встаёт в нужное место.)
А что если произвольную вложенность сделать? Любая задача может содержать любое количество других задач. Так ведь оно и есть по факту.

24.03.2023
-----------------
утро 7:17-9:00
Подумал, что не стоит городить сложную вложенность. Сложность - враг надёжности.
Те же подразделы можно организовать только для отображения. Типа, у такого-то проекта есть такое-то дерево подразделов. Вот это дерево и будет хранить информацию о том, какие в нём проживают задачи.
Сейчас: реализовать сохранение новых задач со странички проекта. Через формы Джанго.
Только начал что-то иное делать. Важно, чтобы все финансы были подбиты по проектам.
Сразу стало понятно, что надо вводить класс инвойсов, через которые все деньги будут
учитываться.
Инвойс - это всегда конкретная бумажка, конкретная транзакция, которая идёт в плюс или в минус компании. В большинстве случаев - по конкретной работе. Если не понятно, по какой, то идёт куда-то в работу под названием miscelaneous.

25.03.2023
------------------
22:00-02:00
Сделал html+js динамическую табличку для быстрого добавления задач в проект.
Заголовки тоже можно добавлять.

27.03.2023
------------------
утро, 7:35-9:00
Что же, надо повторить всю эту динамику в джанго-проекте.
Добавил только проверку ошибки.
вечер, 19:08-22:49
Добавил кучу всего в механику основной страницы с задачами. Проверки ошибок.
Возможность удалять и восстанавливать. 
Заморозку страницы, чтобы никаких инпутов не висело.
Тест добавил, чтобы автоматом куча действий вызывалась и проверялась тем самым.

28.03.2023
------------------
утро, 7:15-9:00
вечер, 19:18-22:28
Todo: Не забыть про необходимость комментариев.
Todo: вначале берётся задаток, типа, 25%. Ну а мы будем вести три поля: Заплачено денег, Прогресс (на такую-то сумму), Заплачено минус Прогресс. И ещё надо бы: Потрачено по факту.

29.03.2023
------------------
утро, 6:40-9:00
А неплохо бы, наверное, всю нужную информацию подкидывать через view, неправда ли? Вот эти все индексы полей и т.п. Закидываешь на страничку через Джанго, берёшь со странички через JS.
Так, усложним первый тест, чтобы побольше полей обрабатывал.
Он потянет за собой необходимость валидации новых полей.
вечер, 19:12-21:30
Поставить delete в один столбец. Для этого искать его не по ячейке, а по id.
Затрахался, но сделал... Время уже 21:50.
Фух... уже 23:31... Баиньки пора... Сделал PrettyRawBtn() функцию, шобы делать красиво :)

30.03.2023
-----------------
утро, 7:15-11:50
Упростил обработку delete, чтобы потом проще было туда же modify припаять.
Сейчас думаю соорудить подсчёт суммы подпроекта (под заголовком).
To Fix: меняется цена всего проекта, если зачёркивается первый заголовок. (Fixed)
вечер, 19:15-22:03
Прогресс ещё надо оформить, а то как-то куце без него.
Запилим-ка модификацию поля. Ссылочка будет пропадать, если поле зачёркнуто.

31.03.2023
-----------------
утро, 7:15 - 9:00
Поле Assigned To будем пока игнорировать при сохранении новых задач.
Todo: двойной клик на текстовом поле в таблице должен вызывать модификацию этого поля. Enter - для заморозки.
Todo: wow-фича - добавить кнопочки типа "тестовый дом", "тестовый гараж", "тестовый сарай", что сразу пачки работ добавлять.

07.04.2023
------------------
утро, 7:30-10:10
Добавил предупреждение, чтобы страничка с задачами не перезагружалась "вдруг".
Подкорректировал вид списка проектов в админской панели, чтобы можно было переходить на страничку проекта оттуда. Смысл такой: добавляем проект в админке, переходим на его страничку для правки.
-14:05
Запилил JSON форматирование для отправки таблички на сохранение.
19:00-23:42
Сделал приём JSON-данных.
Теперь вопрос: нужно положить новые задачи в базу вместе с заголовками, а затем тут же вынуть, вынуть заголовки и правильным образом обратно разместить. Можно ли, сохраняя задачу в базу тут же получать её идентификатор из базы? Чтобы вот для данного Конструкта на ходу формировать структуру его внутренностей.
Header1
- Header2
--- task
--- task
- Header2
-- Header3
--- task
--- task
--- task

08.04.2023
-----------------
утро, 8:35-13:30
Придумал хранить структуру проекта в виде поля в модели проекта. То ли текстовое поле, то ли прямо JsonField, если такое имеется.
{ "Header1": "root", "Lines": {
     "line1": { "type": ("Choice" | "Header2" | "Header3"), "id": ("name" | "number")},
     "line2": { "type": ("Choice" | "Header2" | "Header3"), "id": ("name" | "number")},
     ...
     "lineN": { "type": ("Choice" | "Header2" | "Header3"), "id": ("name" | "number")}
     }
}
В качестве теста: проверять, что набор id линий, которые Choice, в точности соответствует набору Чойсов данного Конструкта (проекта).
При выгрузке на страницу вынимаем набор Чойсов и делаем из него словарь: "id": choice. Берём также словарь линий. Отправляем всё через view в шаблон. В шаблоне перебираем линии и создаём соответствующие <tr> для заголовков и задач.
Сначала сделаю-ка я JSON словарь на отправке данных. Не строчку буду собирать, а именно словарь, который потом сконвертируется.
При создании проекта (пустого или с малым набором задач) никакой структуры у него не будет. Она пустая. Структура создаётся и заполняется в первый раз когда производится сохранение задач со странички с их списком.
19:00 - 23:42
Соорудил разные добавления-сохранения-обновления в базу.
Заделал JSON-структуру проекта, которая в виде текста сохраняется в Конструкт.
Теперь надо организовать распаковку этой структуры обратно на страничку. Перед распаковкой будет checkIntegrity(), чтобы все Чойсы структуры наличествовали в базе под тем же Конструктом.

09.04.2023
------------------
9:00 - 12:00
Извлекаем Чойсы. Извлекаем структуру.
Если структура пустая, то воссоздаём её по чойсам. Просто: "lineK": {"type":"Choice", "id":"N"}
По строчкам структуры создаём строчки для выгрузки на страничку.
18:20-20:30

10.04.2023
------------------
8:00-9:20

11.04.2023
------------------
7:50-9:46
Если нужно обнулить структуру проекта, вписываем туда {} через панель администратора.
Добавил добавление шаблонов Дома и Гаража по ссылкам.

13.04.2023
------------------
7:10 - 9:00
811b3dc (HEAD -> master) Reducing updates of DB by comparing 'new' and old instances.
aa4cb36 Choice notes to be a TextField (not the Char one).
a4c6475 Revised some log printouts
6aef951 Changing 'name' input to <textarea>

14.04.2023
------------------
7:20-9:00

Идея в целом такая: здесь, в этой же системе создать список работ по доработке системы.
Послать Серёге - пусть радуется. Чтобы видно было, что эта штука работает уже сейчас.
Собственно, набросок этого списка будет следующим.
- Приделать номера строчек, чтобы было на что ссылаться в разговорах-обсуждениях.
- Приделать дату и время последнего сохранения, чтобы это было версией проекта.
- Приделать заметки к задаче. Заметок может быть много, но не хочется растягивать строку по высоте. Поэтому для режима просмотра заметки попробуем сделать выпадающим текстом. Для режима правки можно и строку растянуть - не проблема.
- Отладить добавку ответственного за работу. Я так и не понял: Серёга жаловался, что крайне непросто двигать людей и работы в графике, но в то же время говорит, что проект просто отдаётся какой-то команде, и он сам толком не знает, кто там какие работы делает. Кто же тогда людей и работы двигает в графике?
- Сделать диаграммы Ганта для проектов. Просмотр внутри одного проекта. Просмотр между всеми активными проектами. Строчка задачи должна быть невысокая (одна строка текста в названии), в ней находится дата начала, срок исполнения в днях, исполнитель работы, прогресс. Справа - календарь и цветные полоски диаграммы.
- Добавить класс инвойса. Отладить движение денег по проектам со входом и выходом через инвойсы. Написать много тестов для этого.
- Добавить возможность регистрировать входные и выходные инвойсы через форму на странице.
- Добавить возможность регистрировать входные и выходные инвойсы через отправку их на специальный email.
>>> Жук: добавлял задачи, сумел как-то повесить уже добавленную задачу в состоянии modify (кажется, случайно кликнул туда, когда добавлял задачу ниже). А при повторном нажатии modify вся информация из ячеек очистилась. Было печально :(

18.04.2023
-----------------
Жука исправил. Модифицировал 'modify' кнопку. Сделал безопаснее.

20.04.2023
------------------
19-го хорошо так поработал тоже.
Пока не забыл: когда добавляется task или head, надо справа втыкать Freeze.
Когда нажимается delete, надо убирать modify.
Про диаграмму Ганта: надо бы сделать кнопку "Gantt chart", которая оставит только нужные столбцы, ужмёт названия задач до строчек и покажет диаграмму справа. Как вариант, это может быть отдельная табличка, которая будет вставать на место обычной таблицы задач.

11.05.2023
------------------
Много всего уже сделал, но без особой рефлексии, т.к., в принципе, понятно было, что делать, и быстрее делалось без подготовки, прописи и т.п.
А теперь пришло время для класса Инвойса, и я спросил у ЧатГПТ, что такое инвойс.
Спросил также про Чек. Оказалось, что это разные вещи. Но главное, что за ними маячит Транзакция! Инвойс предваряет транзакцию. Чек её закрывает. Но есть нюансы.
Иногда нет никакого инвойса. Мы просто покупаем болт и получаем чек. Всё. Есть исходящая транзакция, нет инвойса, есть чек.
Иногда нет чека. Хотя в идеале такую ситуацию можно исключить. Сотрудник прислал инвойс, получил деньги. Исходящая транзакция, но чека от сотрудника нет. Можно, однако, сохранить заметку (скриншот) о транзакции в качестве чека.
Иногда один инвойс оплачивается в несколько транзакций. Один инвойс = несколько чеков.
Иногда одна транзакция оплачивает несколько инвойсов. Несколько инвойсов = один чек.
Тем не менее, что характерно: один чек = одна транзакция. Отсюда следует, кстати, что достаточно иметь Инвойс и Чек.
Но, пожалуй, надо сценарии расписать.
1. Получаем инвойс. Надо оплатить. Исходящая транзакция. Точнее, незакрытый инвойс на исходящую транзакцию или несколько транзакций. Смотрим, значит, активные инвойсы на данном проекте, суммируем их, получаем общий долг. Можем вывести детали этого долга - сколько и куда надо заплатить.
1.1. Просто делаем покупку в магазине. Имеется чек. Исходящая транзакция. Инвойса не было. Ничего страшного. Просто прицепляем сумму чека в качестве вычета из денег проекта.
2. Высылаем инвойс. Хотим получить деньги. Входящая транзакция. Высылаем клиенту, очевидно. Кто ещё проект оплачивает?
Короче... Именно в силу специфики Инвойса и Чека... Общая ситуация такая.
Сумма всех активных инвойсов (на вход и на выход) - это чей-то долг. Он может быть нулевым, но в деталях может оказаться, что клиент должен столько же (на вход), сколько нужно заплатить рабочим (на выход). Но это будет легко обнаружить по количеству активных (незакрытых) инвойсов.
Сумма же всех Чеков - это текущий свершившийся баланс проекта. Столько-то ушло, столько-то пришло.
Есть, правда, ещё две переменные: общая стоимость проекта и стоимость текущего прогресса. 
Собственно, весь проект - это и есть большой инвойс, который оплачивается частями.
Думаю, стоимость текущего прогресса надо сравнивать с суммой входящих чеков. Висят там инвойсы или нет - это всё дело виртуальное.
Если прогресса больше, чем пришло по чекам от клиента, то можно выписать ему инвойс. Если, опять же, нет уже выписанных инвойсов на ту же сумму.
Если прогресса меньше, то ничего не выпишешь. И тебе не выпишут. Надо работать. 

16.05.2023
------------------
В классе Инвойса генерируем идентификатор. Как я понял, можно это делать с помощью uuid, передавая туда некое пространство имён (пусть это будет NAMESPACE_OID) и идентификатор, которому удобно быть максимальным идентификатором инвойса в базе, увеличенным на единичку.
Будет, значит, форма submit_invoice.html, которая покажет номер Инвойса, а данные надо заполнять. Через неё же можно отправить файл.
Кстати! в Джанго можно сделать модель с полем файла.
Инвойсы можно просматривать после регистрации, но править можно только в панели администратора.
Есть ContentFile - для файла по умолчанию (когда нет его, короче). Есть ImageFile - что нам и надо для работы. Надо бы, наверное, иметь возможность ещё и pdf-файл сохранять для инвойсов и транзакций.

9SU81920H9329520R

Создаём static директорию в корне проекта (где manage.py) и задаём её в качестве STATIC_ROOT в settings.py.
Запускаем manage.py collectstatic, и все статичные файлы собираются в эту директорию. Указываем её как алиас в конфигурации nginx.

06.06.2023
----------
Как сделать диаграммы Ганта с помощью Bokeh: https://stackoverflow.com/questions/31820578/how-to-plot-stacked-event-duration-gantt-charts

13.08.2023
----------
Что собираюсь сделать. Собираюсь переехать на кастомного пользователя. Для этого достаточно:
- отключиться от базы
- реализовать этого пользователя
- создать новую базу
И всё, по идее, будет работать. Добавление проектов, задач, транзакций и т.п.
Но вопрос в том, как сохранить уже существующие проекты и т.п.
Их придётся перекидывать вручную.
Значит, понадобится контролировать этот процесс. Всё проверять.
Например, выгрузить статистику по каждому проекту в какой-то файл:
) сколько там задач
) сколько транзакций
) сколько инвойсов
) сколько связей инвойс-транзакция
) сколько исторических записей
) сумма по всем входящим транзакциям
) сумма по всем исходящим
) аналогично с инвойсами
) аналогично по всем связанным парам.
Затем брать и сравнивать эту статистику с любым другим проектом.
Например, с тем же, только подгруженным в новую базу.
Так можно будет с хорошей долей уверенности утверждать, что ничего не потеряно.

03.10.2023
----------
Депозит. Про депозит подробнее.
Сделаем галочку "main contract choice" в чойсе, чтобы помечать чойсы, связанные с депозитом.
Сделаем функцию Construct.get_deposit_amount(), чтобы находила депозит среди транзакций по тегу #deposit.
Создадим некий тестовый скрипт, в котором есть проект с основными и дополнительными работами,
и в этот проект поступают разные транзакции: депозитная транзакция, транзакция по прогрессу основных
и дополнительных работ.
Надо будет пересмотреть подсчёт разных денежных характеристик.
Типа, вот депозит, вот прогресс основных работ, вот прогресс дополнительных работ...
Сколько есть свободных денег? Сколько можно запросить инвойсом у клиента?

18.01.2024
----------
Учимся работать с Cypress.
Вот некоторые наставления с https://www.valentinog.com/blog/django-cypress.
Ну, Cypress уже установлен, что-то испробовано...
И вот выясняется, что у Django есть тестовый сервер, но его надо запускать с какой-нибудь предварительной базой данных.
Поэтому берём какую-то базу данных (на локальной машине).
Удаляем все проекты и всех пользователей, чтобы не светить.
Удаляем также все категории.
Сохраняем эту базу вот таким образом (без подчёркиваний):
python manage.py dumpdata --format json -o cypress/fixtures/test__.json

После этого можно запускать тестовый сервер:
python manage.py testserver cypress/fixtures/test.json

Ну и Сурге55:
nvm use 20.5.0 (один раз на терминал)
npx cypress open

Для тестирования без запуска браузера:
npx cypress run

В общем, с 9 до часу ночи писал тесты на Cypress.

21.03.2024
----------
И работает оно примерно так:
- запускаем тестовый сервер
- запускаем браузер Электрон в Cypress
- запускаем тест
- если тесты исправлены, то убиваем Электрон
- убиваем тестовый сервер и снова запускаем его
- включаем Электрон и запускаем тесты

22.03.2024
----------
Бага 1: создаю чойс, нажимаю task, создаётся следующий чойс,
но у предыдущего не сбрасывается таймер отправки. Пока правлю второй, первый улетает
на сервер, и на странице всё так, будто ничего не правится.
Надо при создании новой таски сбрасывать таймер отправки.

Бага 2: когда от сервера приходит ответ об обновлении задач (это всё в бэкграунде),
надо обновить идентификаторы строк, чтобы при повторной отправке строки не выглядели новыми!
Иначе они каждый раз дублируются.