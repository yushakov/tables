20.03.2023
------------------
Projects (contain apps).
Apps - any app can be within multiple projects.
Models - DB entities (Django manages adding new fields, etc.)
Views - "web pages" for an App. View design can be separated from Python code via Templates.
С 7:40 до 8:40 утром
С 7:20 вечером...
Есть возможность быстро добавлять тесты.
Работа со статичными файлами, типа style.css, background.png...

Будет примерно так. Проект constructivechoice_dev -- его, говорят, можно поменять в смысле названия. Поведём аналогию с игрушечным приложением polls из обучалки.
Там можно было добавлять вопрос и варианты ответа.
Мы же будем добавлять строительные проекты. А в них --- задачи, которые будем решать.
Чтобы это всё не было скучным, подрулим сразу с философией.
Объект (программный) будем называть не скучным и похожим на всё на свете словом project, а прикольным словечком construct. Опции проекта (задачи) будут не тасками, а выборами: choice. Оно ведь так и называется constructive choice.
Создал аппликацию list, в которой уже будут конструкты. А в них уже --- чойсы.
Время: 21:20. Пора спать.

21.03.2023
-----------------
утро, 7:45-9:17
Соорудил классы для Конструкта и Чойса.
Добавил в базу.
Добавил админа: yury, пароль - физика обычная.
Зарегал класс Конструкта. Теперь их можно добавлять в базу из админской панели.
Вопрос: как в тот конструкт добавлять чойсы?
вечер, 20:00-22:55
Тест: чтобы прогресс проекта совпадал со средним от прогрессов задач.
У нас механика такая:
- список проектов. Название - это ссылка на детали. Рядом кнопка "править", чтобы править эти детали.
- заходим в проект
- можем поменять прогресс у каждой задачи

22.03.2023
------------------
утро, 6:45-
Фича: Чойс "разное" для денежных потоков, которые не ложатся на конретные работы.
Прогресс и Инвойсы - вот что важно.
Список проектов в виде таблицы. Прокрутка вправо не смещает первый столбец - название проекта. Аналогично для таблицы работ.
Нацелим это дело изначально на главного админа. Потом, думаю, не будет проблем скрывать те или иные столбцы, если у пользователя нет на них прав.
Каждая задача может быть адресована либо человеку, либо команде. Но в команде тоже конкретные люди. Также, несколько человек могут быть прикреплены к задаче. Значит, нужны такие рабочие (Workers), как: Команда-такая-то и Somebody (которого можно прикреплять при создании работы, когда ещё непонятно, кто там будет).
Кроме того, есть ещё профессии, не привязанные к людям. Их тоже можно завести в качестве рабочих. Что-то вроде Somebody.
- Добавил разделитель тысяч; класс Рабочих (рабочий класс)); валидаторы телефона и имейла; ManyToMany() отношение между Рабочими и Чойсами; стилевой файл style.css; аккуратные таблички вместо списков.
