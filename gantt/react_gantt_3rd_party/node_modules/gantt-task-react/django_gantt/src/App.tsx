import React, { useEffect, useState, useRef } from "react";
import { Task, TaskType, ViewMode, Gantt } from "gantt-task-react";
import "gantt-task-react/dist/index.css";
import axios from 'axios';
import { ViewSwitcher } from "./components/view-switcher";

declare global {
  interface Window {
    construct_id: number;
    protocol: string;
    host: string;
    port: string;
    csrf: string;
    interactive: boolean;
    getChoicesLink: string;
  }
}

// import { initTasks } from "./helper";

function getStartEndDateForProject(tasks: Task[], projectId: string) {
  const projectTasks = tasks.filter(t => t.project === projectId);
  if (projectTasks.length === 0) {
    if (tasks.length == 0) {
      return [new Date(), new Date()];
    }
    return [tasks[0].start, tasks[0].end];
  }
  let start = projectTasks[0].start;
  let end = projectTasks[0].end;

  for (let i = 0; i < projectTasks.length; i++) {
    const task = projectTasks[i];
    if (start.getTime() > task.start.getTime()) {
      start = task.start;
    }
    if (end.getTime() < task.end.getTime()) {
      end = task.end;
    }
  }
  return [start, end];
}

interface Choice {
  id: string;
  construct_name?: string,
  name_txt?: string;
  plan_start_date: string;
  plan_days_num: number;
  progress_percent_num: number;
  type: TaskType;
  hide_children?: number;
  display_order?: number;
}

//
const App = () => {
  const construct_id: Number = window.construct_id;
  const protocol: String = window.protocol;
  const host: String = window.host;
  const port: String = window.port;
  const default_tsk: Task = {
    start: new Date(),
    end: new Date(),
    name: "",
    id: "",
    progress: 0,
    type: "project",
    hideChildren: false,
    displayOrder: 1,
  };
  const [view, setView] = useState<ViewMode>(ViewMode.Day);
  const [tasks, setTasks] = useState<Task[]>([default_tsk]);
  const [isChecked, setIsChecked] = useState(true);
  const [pageState, setPageState] = useState('saved');
  const [timer, setTimer] = useState<number>(0);
  const tasksRef = useRef(tasks);
  const [displayText, setDisplayText] = useState<string>('<p>Data loaded from DB.</p>');

  let columnWidth = 65;
  if (view === ViewMode.Year) {
    columnWidth = 350;
  } else if (view === ViewMode.Month) {
    columnWidth = 300;
  } else if (view === ViewMode.Week) {
    columnWidth = 250;
  }

  useEffect(() => {
    tasksRef.current = tasks;
  }, [tasks]);

  useEffect(() => {
    const handleBeforeUnload = (event: BeforeUnloadEvent) => {
        if (pageState === 'modified') {
            const message = 'You have unsaved changes. Are you sure you want to leave?';
            event.returnValue = message; // Standard for most browsers
            return message; // For some older browsers
        }
        return undefined;
    };

    // Set up the event listener
    window.addEventListener('beforeunload', handleBeforeUnload);

    // Clean up the event listener
    return () => {
        window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [pageState]);

  useEffect(() => {
    axios.get<Choice[]>(window.getChoicesLink)
      .then(response => {
        const transformedTasks: Task[] = response.data.map((choice: Choice) => {
          const endDate = new Date(choice.plan_start_date);
          endDate.setDate(endDate.getDate() + choice.plan_days_num);
          return {
            id: choice.id,
            name: choice.name_txt!.slice(0, 100),
            start: new Date(choice.plan_start_date),
            end: endDate,
            progress: choice.progress_percent_num,
            type: choice.type,
            dependencies: [],
            project: choice.construct_name,
            hideChildren: choice.hide_children == 1,
            displayOrder: choice.display_order
          };
        });
        for (let i = 1; i < transformedTasks.length; i++) {
          if (transformedTasks[i].type === 'project') {
            const [start, end] = getStartEndDateForProject(transformedTasks, transformedTasks[i].id);
            transformedTasks[i].start = start;
            transformedTasks[i].end = end;
          }
        }
        setTasks(transformedTasks.slice(1));
      })
      .catch(error => console.log(error));
  }, [construct_id]);

  function runTimerBeforeSaving() {
    if (pageState === 'saved') {
      setPageState('modified');
    }
    // Clear any existing timer
    if (timer) {
      clearTimeout(timer);
    }
    // Start a new timer
    const newTimer = setTimeout(() => {
      handleSubmit();
    }, 7000) as unknown as number; // 7 seconds
    setTimer(newTimer);
    console.log("Data modified!");
    setDisplayText("<p style='color: red'>** data modified **</p>");
  }

  const handleTaskChange = (task: Task) => {
    console.log("On date change Id:" + task.id);
    let newTasks = tasks.map(t => (t.id === task.id ? task : t));
    if (task.project) {
      const [start, end] = getStartEndDateForProject(newTasks, task.project);
      const project = newTasks[newTasks.findIndex(t => t.id === task.project)];
      if (
        project.start.getTime() !== start.getTime() ||
        project.end.getTime() !== end.getTime()
      ) {
        const changedProject = { ...project, start, end };
        newTasks = newTasks.map(t =>
          t.id === task.project ? changedProject : t
        );
      }
    }
    setTasks(newTasks);
    runTimerBeforeSaving();
  };

  const handleTaskDelete = (task: Task) => {
    const conf = window.confirm("Are you sure about " + task.name + " ?");
    if (conf) {
      setTasks(tasks.filter(t => t.id !== task.id));
    }
    return conf;
  };

  const handleProgressChange = async (task: Task) => {
    setTasks(tasks.map(t => (t.id === task.id ? task : t)));
    console.log("On progress change Id:" + task.id);
    runTimerBeforeSaving();
  };

  const handleDblClick = (task: Task) => {
    alert("On Double Click event Id:" + task.id);
  };

  const handleClick = (task: Task) => {
    console.log("On Click event Id:" + task.id);
  };

  const handleSelect = (task: Task, isSelected: boolean) => {
    console.log(task.name + " has " + (isSelected ? "selected" : "unselected"));
  };

  const handleExpanderClick = (task: Task) => {
    setTasks(tasks.map(t => (t.id === task.id ? task : t)));
    console.log("On expander click Id:" + task.id);
  };

  const handleSubmit = () => {
    const csrfToken = window.csrf;
    const request: string = `${protocol}${host}${port}/gantt/api/choices_update/`;
    const choices: Choice[] = tasksRef.current.map((task: Task) => {
      const days: number = Math.round((task.end.getTime() - task.start.getTime()) / (1000 * 3600 * 24));
      const start_date_string: string = `${task.start.getFullYear()}-${task.start.getMonth() + 1}-${task.start.getDate()}`
      return {
        id: task.id,
        plan_start_date: start_date_string,
        plan_days_num: days,
        progress_percent_num: task.progress,
        type: task.type
      };
    });
    console.log(choices);
    axios.post(request, { choices }, { headers: {'X-CSRFToken': csrfToken }})
      .then(response => {
        // Handle the response, e.g., show a success message
        console.log(response);
        setPageState('saved');
        console.log("Data saved to DB.")
        setDisplayText("<p>... data saved to DB ...</p>")
      })
      .catch(error => {
        // Handle errors, e.g., show an error message
        console.log(error);
      });
      if (timer) {
        clearTimeout(timer);
        setTimer(0);
      }
  };

  useEffect(() => {
    return () => {
        if (timer) {
            clearTimeout(timer);
        }
    };
  }, [timer]);

  return (
    <div className="Wrapper">
      <ViewSwitcher
        onViewModeChange={viewMode => setView(viewMode)}
        onViewListChange={setIsChecked}
        isChecked={isChecked}
      />
      <div dangerouslySetInnerHTML={{ __html: displayText }} />
      <Gantt
        tasks={tasks}
        viewMode={view}
        onDateChange={window.interactive ? handleTaskChange : undefined}
        onDelete={window.interactive ? handleTaskDelete : undefined}
        onProgressChange={window.interactive ? handleProgressChange : undefined}
        onDoubleClick={window.interactive ? handleDblClick : undefined}
        onClick={window.interactive ? handleClick : undefined}
        onSelect={window.interactive ? handleSelect : undefined}
        onExpanderClick={handleExpanderClick}
        listCellWidth={isChecked ? "155px" : ""}
        columnWidth={columnWidth}
      />
      <button onClick={handleSubmit}>Submit Changes</button>
    </div>
  );
};

export default App;
