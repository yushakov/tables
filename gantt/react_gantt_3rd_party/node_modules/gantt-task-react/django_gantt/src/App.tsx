import React, { useEffect, useState } from "react";
import { Task, TaskType, ViewMode, Gantt } from "gantt-task-react";
import "gantt-task-react/dist/index.css";
import axios from 'axios';
import { ViewSwitcher } from "./components/view-switcher";

declare global {
  interface Window {
    construct_id: number;
    protocol: string;
    host: string;
    port: string;
  }
}

// import { initTasks } from "./helper";

function getStartEndDateForProject(tasks: Task[], projectId: string) {
  const projectTasks = tasks.filter(t => t.project === projectId);
  let start = projectTasks[0].start;
  let end = projectTasks[0].end;

  for (let i = 0; i < projectTasks.length; i++) {
    const task = projectTasks[i];
    if (start.getTime() > task.start.getTime()) {
      start = task.start;
    }
    if (end.getTime() < task.end.getTime()) {
      end = task.end;
    }
  }
  return [start, end];
}

interface Choice {
  id: number;
  construct_name: string,
  name_txt: string;
  plan_start_date: string;
  plan_days_num: number;
  progress_percent_num: number;
  type: TaskType;
  hide_children: number;
  display_order: number;
}

//
const App = () => {
  const construct_id: Number = window.construct_id;
  const protocol: String = window.protocol;
  const host: String = window.host;
  const port: String = window.port;
  const default_tsk: Task = {
    start: new Date(),
    end: new Date(),
    name: "",
    id: "",
    progress: 0,
    type: "project",
    hideChildren: false,
    displayOrder: 1,
  };
  const [view, setView] = useState<ViewMode>(ViewMode.Day);
  const [tasks, setTasks] = useState<Task[]>([default_tsk]);
  //const [tasks, setTasks] = useState<Task[]>(initTasks());
  const [isChecked, setIsChecked] = React.useState(true);
  let columnWidth = 65;
  if (view === ViewMode.Year) {
    columnWidth = 350;
  } else if (view === ViewMode.Month) {
    columnWidth = 300;
  } else if (view === ViewMode.Week) {
    columnWidth = 250;
  }

  useEffect(() => {
    const request: string = `${protocol}${host}${port}/gantt/api/choices/?id=${construct_id}`;
    axios.get<Choice[]>(request)
      .then(response => {
        const transformedTasks: Task[] = response.data.map((choice: Choice) => {
          const endDate = new Date(choice.plan_start_date);
          endDate.setDate(endDate.getDate() + choice.plan_days_num);
          return {
            id: choice.id.toString(),  // Convert id to string
            name: choice.name_txt.slice(0, 100),
            start: new Date(choice.plan_start_date),
            end: endDate,
            progress: choice.progress_percent_num,
            type: choice.type,  // Assuming all choices are of type "task"
            dependencies: [],  // Assuming no dependencies for simplicity
            project: choice.construct_name,
            hideChildren: choice.hide_children == 1,
            displayOrder: choice.display_order
          };
        });
        const [start, end] = getStartEndDateForProject(transformedTasks, transformedTasks[0].id);
        transformedTasks[0].start = start;
        transformedTasks[0].end = end;
        setTasks(transformedTasks);
      })
      .catch(error => console.log(error));
  }, [construct_id]);

  const handleTaskChange = (task: Task) => {
    console.log("On date change Id:" + task.id);
    let newTasks = tasks.map(t => (t.id === task.id ? task : t));
    if (task.project) {
      const [start, end] = getStartEndDateForProject(newTasks, task.project);
      const project = newTasks[newTasks.findIndex(t => t.id === task.project)];
      if (
        project.start.getTime() !== start.getTime() ||
        project.end.getTime() !== end.getTime()
      ) {
        const changedProject = { ...project, start, end };
        newTasks = newTasks.map(t =>
          t.id === task.project ? changedProject : t
        );
      }
    }
    setTasks(newTasks);
  };

  const handleTaskDelete = (task: Task) => {
    const conf = window.confirm("Are you sure about " + task.name + " ?");
    if (conf) {
      setTasks(tasks.filter(t => t.id !== task.id));
    }
    return conf;
  };

  const handleProgressChange = async (task: Task) => {
    setTasks(tasks.map(t => (t.id === task.id ? task : t)));
    console.log("On progress change Id:" + task.id);
  };

  const handleDblClick = (task: Task) => {
    alert("On Double Click event Id:" + task.id);
  };

  const handleClick = (task: Task) => {
    console.log("On Click event Id:" + task.id);
  };

  const handleSelect = (task: Task, isSelected: boolean) => {
    console.log(task.name + " has " + (isSelected ? "selected" : "unselected"));
  };

  const handleExpanderClick = (task: Task) => {
    setTasks(tasks.map(t => (t.id === task.id ? task : t)));
    console.log("On expander click Id:" + task.id);
  };

  const handleSubmit = () => {
    /* const request: string = `${protocol}${host}${port}/gantt/api/choices/?id=${construct_id}`;
    axios.post('http://localhost:8000/path/to/your/api/', { tasks })
      .then(response => {
        // Handle the response, e.g., show a success message
      })
      .catch(error => {
        // Handle errors, e.g., show an error message
      }); */
  };
  

  return (
    <div className="Wrapper">
      <ViewSwitcher
        onViewModeChange={viewMode => setView(viewMode)}
        onViewListChange={setIsChecked}
        isChecked={isChecked}
      />
      <Gantt
        tasks={tasks}
        viewMode={view}
        onDateChange={handleTaskChange}
        onDelete={handleTaskDelete}
        onProgressChange={handleProgressChange}
        onDoubleClick={handleDblClick}
        onClick={handleClick}
        onSelect={handleSelect}
        onExpanderClick={handleExpanderClick}
        listCellWidth={isChecked ? "155px" : ""}
        columnWidth={columnWidth}
      />
      <button onClick={handleSubmit}>Submit Changes</button>
    </div>
  );
};

export default App;
